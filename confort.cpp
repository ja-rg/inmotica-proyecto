/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/6d713ec0-9d4b-491a-bc9f-a93c30a867d9 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  CloudColor color;
  bool control_manual;
  bool fire;
  bool gas;
  bool light;
  bool movement;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"
#include <Adafruit_NeoPixel.h>
#include <WiFi.h>
#include <HTTPClient.h>

// Define the pin where the Neopixel strip is connected
#define LIGHT_PIN 7
#define NUMPIXELS_INTERNAL 16

#define MOVEMENT_LIGHT_PIN 6

#define EXTERNAL_LIGHT_PIN 16
#define MOVEMENT_PIN 17
#define LIGHT_SENSOR 18

#define INTERVAL 10000              // Umbral de temperatura en grados Celsius

Adafruit_NeoPixel internal_cut(NUMPIXELS_INTERNAL, LIGHT_PIN, NEO_GRB + NEO_KHZ800);

#define DELAYVAL 150  // Time (in milliseconds) to pause between pixels

const char* serverName = "https://inmotics.eastus.cloudapp.azure.com/api/collections/consumo/records";
HTTPClient http;

unsigned long previousMillis = 0;  // will store last time the HTTP request was sent

void setup() {
  Serial.begin(9600);
  delay(1500);

  pinMode(EXTERNAL_LIGHT_PIN, OUTPUT);
  pinMode(MOVEMENT_PIN, INPUT);
  pinMode(LIGHT_SENSOR, INPUT);

  initProperties();
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();

// These lines are specifically to support the Adafruit Trinket 5V 16 MHz.
// Any other board, you can remove this part (but no harm leaving it):
#if defined(__AVR_ATtiny85__) && (F_CPU == 16000000)
  clock_prescale_set(clock_div_1);
#endif
  // END of Trinket-specific code.

  internal_cut.begin();            // INITIALIZE NeoPixel strip object (REQUIRED)
  digitalWrite(RGB_BUILTIN, LOW);  // Turn the RGB LED off

  delay(100);
}


void sendPostRequest(String devices) {
  unsigned long currentMillis = millis();
  if (currentMillis - previousMillis >= INTERVAL) {
    previousMillis = currentMillis;

    // Optionally disable certificate verification (not recommended for production)
    http.begin(serverName /* rootCA */);

    http.addHeader("Content-Type", "application/json");

    Serial.println("Sending HTTP POST request...");
    int httpResponseCode = http.POST(devices);

    if (httpResponseCode > 0) {
      String response = http.getString();
      Serial.println("HTTP Response code: " + String(httpResponseCode));
      Serial.println("Response: " + response);
    } else {
      Serial.print("Error on sending POST: ");
      Serial.println(httpResponseCode);
    }
    http.end();
  }
}

void turn_lights(bool on) {
  digitalWrite(EXTERNAL_LIGHT_PIN, on ? LOW : HIGH);
  if (on) {
    sendPostRequest("{\"dispositivo\": [\"qlzhe2t6ima7fdk\"]}");
  }
}


void loop() {
  ArduinoCloud.update();

  movement = digitalRead(MOVEMENT_PIN) == HIGH;

  if (gas && fire) {
    setAllPixels(34, 0, 186);
    delay(DELAYVAL);  // Pause before next pass through loop
    setAllPixels(255, 0, 0);
    sendPostRequest("{\"dispositivo\": [\"e8ymii06tjqgsqz\"]}");  // Adafruit neopixel
  } else if (gas) {
    setAllPixels(34, 0, 186);
    sendPostRequest("{\"dispositivo\": [\"e8ymii06tjqgsqz\"]}");  // Adafruit neopixel
  } else if (fire) {
    setAllPixels(255, 0, 0);
    sendPostRequest("{\"dispositivo\": [\"e8ymii06tjqgsqz\"]}");  // Adafruit neopixel
  } else if (control_manual) {
    uint8_t R, G, B;
    color.getValue().getRGB(R, G, B);
    setAllPixels(R, G, B);
    sendPostRequest("{\"dispositivo\": [\"e8ymii06tjqgsqz\"]}");  // Adafruit neopixel
  } else if (movement) {
    setAllPixels(255, 255, 255);
    delay(7E+3);
    for (int i = 0; i < 2; i++) {
      sendPostRequest("{\"dispositivo\": [\"e8ymii06tjqgsqz\"]}");  // Adafruit neopixel
    }
  } else {
    setAllPixels(219, 117, 15);
  }

  sendPostRequest("{\"dispositivo\": [\"5f6ukey4nnq5axr\", f5r2j8xl9489nhj]}");  // f5r2j8xl9489nhj

  const bool ligth_sensor = digitalRead(LIGTH_SENSOR) == LOW;
    turn_lights(ligth_sensor);
}

void setAllPixels(uint8_t R, uint8_t G, uint8_t B) {
  internal_cut.clear();  // Set all pixel colors to 'off'

  for (int i = 0; i < NUMPIXELS_INTERNAL; i++) {
    internal_cut.setPixelColor(i, internal_cut.Color(R, G, B));
  }
  internal_cut.show();
  delay(DELAYVAL);  // Pause before next pass through loop
}

void onControlManualChange() {
  if (control_manual) {
    // neopixelWrite(RGB_BUILTIN, 0, 255, 255);  // Blue
    for (int i = 0; i < 2; i++) {
      setAllPixels(0, 0, 0);
      delay(DELAYVAL);  // Pause before next pass through loop
      setAllPixels(0, 255, 0);
      delay(DELAYVAL);  // Pause before next pass through loop
    }
  } else {
    // neopixelWrite(RGB_BUILTIN, 0, 255, 255);  // Blue
    for (int i = 0; i < 2; i++) {
      setAllPixels(0, 0, 0);
      delay(DELAYVAL);  // Pause before next pass through loop
      setAllPixels(0, 255, 255);
      delay(DELAYVAL);  // Pause before next pass through loop
    }
  }

  delay(DELAYVAL);  // Pause before next pass through loop
}

void onColorChange() {
  if (!control_manual) return;

  internal_cut.clear();  // Set all pixel colors to 'off'
  uint8_t R, G, B;
  color.getValue().getRGB(R, G, B);
  Serial.printf("Color: (R: %u, G: %u, B:%u)\n", R, G, B);

  for (int i = 0; i < NUMPIXELS_INTERNAL; i++) {  // For each pixel...
    internal_cut.setPixelColor(i, internal_cut.Color(R, G, B));
    internal_cut.show();  // Send the updated pixel colors to the hardware.
    delay(DELAYVAL);      // Pause before next pass through loop
  }
}

/*
  Since Fire is READ_WRITE variable, onFireChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onFireChange() {
  if (control_manual) return;

  if (fire)
    for (int i = 0; i < 2; i++) {
      setAllPixels(0, 0, 0);
      delay(DELAYVAL);  // Pause before next pass through loop
      setAllPixels(255, 0, 0);
      delay(DELAYVAL);  // Pause before next pass through loop
    }
}

/*
  Since Gas is READ_WRITE variable, onGasChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onGasChange() {
  if (control_manual) return;

  if (gas)
    for (int i = 0; i < 2; i++) {
      setAllPixels(0, 0, 0);
      delay(DELAYVAL);  // Pause before next pass through loop
      setAllPixels(34, 0, 186);
      delay(DELAYVAL);  // Pause before next pass through loop
    }
}

void onLightChange() {
  if (!control_manual) return;
  turn_lights(light);
}
